name: Build CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            shell_type: pwsh
          - os: ubuntu-latest
            shell_type: bash
          - os: macos-latest
            shell_type: bash

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell_type }}

    steps:
    # 1. Checkout del código
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Instalar Ninja
    - name: Install Ninja (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y ninja-build
    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja
    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      run: choco install ninja --no-progress

    # 3. Configurar caché para Vulkan SDK
    - name: Cache Vulkan SDK
      id: cache-vulkan-sdk
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/vulkan-sdk
        key: ${{ runner.os }}-vulkansdk-${{ secrets.VULKAN_SDK_VERSION || '1.3.268.0' }}

    # 4. Instalar Vulkan SDK (Usando acción)
    - name: Set up Vulkan SDK
      uses: jcelerier/setup-vulkan-sdk@v1
      with:
        vulkan-query-version: ${{ secrets.VULKAN_SDK_VERSION || '1.3.268.0' }}
        vulkan-components: 'Runtime,ShaderToolchain'
        vulkan-install-path: ${{ runner.temp }}/vulkan-sdk
      if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'

    # 5. Configurar entorno Vulkan SDK
    - name: Configure Vulkan SDK Environment
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "VULKAN_SDK=${{ runner.temp }}/vulkan-sdk" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "${{ runner.temp }}/vulkan-sdk/Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        else
          echo "VULKAN_SDK=${{ runner.temp }}/vulkan-sdk" >> $GITHUB_ENV
          echo "${{ runner.temp }}/vulkan-sdk/bin" >> $GITHUB_PATH
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "LD_LIBRARY_PATH=${{ runner.temp }}/vulkan-sdk/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          fi
        fi
      shell: ${{ matrix.shell_type }}

    # 6. Verificar herramientas Vulkan
    - name: Verify Vulkan Tools (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "VULKAN_SDK: $Env:VULKAN_SDK"
        echo "PATH: $Env:PATH"
        # vulkaninfo --summary || echo "vulkaninfo failed (continuing)" # Puede fallar en CI mínimo
        glslc --version
      shell: pwsh
    - name: Verify Vulkan Tools (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "VULKAN_SDK: $VULKAN_SDK"
        echo "PATH: $PATH"
        # vulkaninfo --summary || echo "vulkaninfo failed (continuing)" # Puede fallar en CI mínimo
        glslc --version
      shell: bash

    # 7. Configurar el proyecto con CMake (FetchContent descargará deps)
    - name: Configure CMake
      run: > # El '>' permite escribir el comando en varias líneas sin '\'
        cmake -S ${{ github.workspace }} 
              -B build 
              -G Ninja 
              -DCMAKE_BUILD_TYPE=Release 
              -DGLFW_BUILD_WAYLAND=OFF # <-- Deshabilitar Wayland aquí
      # No se necesita env VULKAN_SDK si está en el PATH

    # 8. Compilar el proyecto
    - name: Build project
      run: cmake --build build --config Release --parallel

    # 9. Crear paquete de artefactos (Windows)
    - name: Package artifact (Windows)
      if: runner.os == 'Windows'
      run: |
        New-Item -ItemType Directory -Force -Path artifact
        New-Item -ItemType Directory -Force -Path artifact/shaders
        Copy-Item -Path "build/src/Release/ParticleSimulation.exe" -Destination "artifact/" -ErrorAction SilentlyContinue
        Copy-Item -Path "build/shaders/*.spv" -Destination "artifact/shaders/" -ErrorAction SilentlyContinue
      shell: pwsh
    # 10. Crear paquete de artefactos (Linux/macOS)
    - name: Package artifact (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p artifact/shaders
        cp build/src/ParticleSimulation artifact/ParticleSimulation || echo "Executable not found"
        cp build/shaders/*.spv artifact/shaders/ || echo "Shaders not found"
      shell: bash

    # 11. Subir el artefacto
    - name: Upload Artifact (${{ matrix.os }})
      uses: actions/upload-artifact@v4
      with:
        name: ParticleSimulation-${{ matrix.os }}
        path: artifact/
        if-no-files-found: warn